// <auto-generated />
using System;
using GarageDataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GarageAPI.Migrations
{
    [DbContext(typeof(GarageDBContext))]
    [Migration("20221211184644_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GarageDataBase.Tables.CustomerStateTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CustomerStates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Clear"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Banned"
                        });
                });

            modelBuilder.Entity("GarageDataBase.Tables.CustomerTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("VisitCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerStateId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CustomerStateId = 1L,
                            Email = "ar-seny@mail.ru",
                            FirstName = "Арсений",
                            LastName = "Тестовый",
                            SecondName = "Васильев",
                            VisitCount = 0L
                        });
                });

            modelBuilder.Entity("GarageDataBase.Tables.RecordStateTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RecordStates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Waiting"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("GarageDataBase.Tables.RecordTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlaceNumber")
                        .HasColumnType("integer");

                    b.Property<long>("RecordStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RecordStateId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("GarageDataBase.Tables.CustomerTable", b =>
                {
                    b.HasOne("GarageDataBase.Tables.CustomerStateTable", "CustomerState")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerState");
                });

            modelBuilder.Entity("GarageDataBase.Tables.RecordTable", b =>
                {
                    b.HasOne("GarageDataBase.Tables.CustomerTable", "Customer")
                        .WithMany("Records")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageDataBase.Tables.RecordStateTable", "RecordState")
                        .WithMany("Records")
                        .HasForeignKey("RecordStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RecordState");
                });

            modelBuilder.Entity("GarageDataBase.Tables.CustomerStateTable", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("GarageDataBase.Tables.CustomerTable", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("GarageDataBase.Tables.RecordStateTable", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
